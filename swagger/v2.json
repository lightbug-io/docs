{
  "components": {
    "schemas": {
      "BuyPlansRequest": {
        "properties": {
          "currency": {
            "description": "Currency to charge in (gbp, usd, eur)",
            "enum": [
              "usd",
              "eur",
              "gbp"
            ],
            "type": "string"
          },
          "products": {
            "additionalProperties": {
              "type": "integer"
            },
            "description": "Map of SKUs to quantity to add to the checkout",
            "example": {
              "SKU-1": 1,
              "SKU-2": 7
            },
            "type": "object"
          }
        },
        "required": [
          "currency",
          "products"
        ],
        "type": "object"
      },
      "LoginRequest": {
        "properties": {
          "password": {
            "description": "Password of the user",
            "type": "string"
          },
          "refreshable": {
            "description": "Generate a refresh token, which expires this many seconds after the access token expiry. Max 31 days",
            "maximum": 2678400,
            "type": "integer"
          },
          "username": {
            "description": "TODO convert to email instead of username before publishing auth routes...",
            "type": "string"
          }
        },
        "required": [
          "password",
          "username"
        ],
        "type": "object"
      },
      "LoginResponse": {
        "properties": {
          "expiry": {
            "description": "Expiry of the access token",
            "type": "string"
          },
          "refreshToken": {
            "description": "Optional: Single use refresh token, if refreshable is set",
            "type": "string"
          },
          "refreshTokenExpiry": {
            "description": "Optional: Expiry of the refresh token, if refreshable is set",
            "type": "string"
          },
          "token": {
            "description": "JWT access token",
            "type": "string"
          },
          "userId": {
            "description": "User ID of the logged in user",
            "type": "integer"
          }
        },
        "required": [
          "expiry",
          "token",
          "userId"
        ],
        "type": "object"
      },
      "LogoutResponse": {
        "type": "object"
      },
      "PaginatedResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/data"
          }
        ],
        "properties": {
          "data": {
            "description": "Paginated data"
          },
          "limit": {
            "description": "Requested elements per page",
            "type": "integer"
          },
          "page": {
            "description": "Requested page number",
            "type": "integer"
          },
          "totalElements": {
            "description": "Total elements in the database for given filters",
            "type": "integer"
          },
          "totalPages": {
            "description": "Total pages of elements given limit and filters",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PasswordResetRequest": {
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ],
        "type": "object"
      },
      "PasswordResetResponse": {
        "properties": {
          "processed": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Plan": {
        "properties": {
          "displayName": {
            "type": "string"
          },
          "features": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "onoWhitelistId": {
            "description": "Connectivity *string `json:\"connectivity\"`\nGroup        string  `json:\"group\"`\nResellerID     *int32  `json:\"resellerId\"`\nResellerPlanID *int32  `json:\"resellerPlanId\"`\nArchived *int32 `json:\"archived\"`\nPlanType       string  `json:\"planType\"`",
            "type": "integer"
          },
          "prices": {
            "$ref": "#/components/schemas/ProductPricing"
          },
          "sku": {
            "type": "string"
          },
          "sleepLimit": {
            "type": "integer"
          },
          "wakeLimit": {
            "description": "Term           string  `json:\"term\"`\nPrice          float64 `json:\"price\"`\nCurrency       string  `json:\"currency\"`\nOwnerID        int32   `json:\"ownerId\"`",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ProductPricing": {
        "properties": {
          "eur": {
            "description": "breaks:  example:\"[0,1.99],[10,1.89]\"` // Array of quantity to price in EUR",
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "uniqueItems": false
          },
          "gbp": {
            "description": "breaks:   example:\"[1,2.34],[10,2.22]\"` // Array of quantity to price in GBP",
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "uniqueItems": false
          },
          "tax": {
            "$ref": "#/components/schemas/ProductPricing"
          },
          "usd": {
            "description": "breaks:   example:\"[1,4.35],[10,4.26]\"` // Array of quantity to price in USD",
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object"
      },
      "RefreshTokenRequest": {
        "properties": {
          "accessToken": {
            "description": "Current access token (may be expired)",
            "type": "string"
          },
          "refreshToken": {
            "description": "Current refresh token",
            "type": "string"
          },
          "refreshable": {
            "description": "A new refresh token will be generated, with an expiry this many seconds after the access token expiry. Max 31 days",
            "maximum": 2678400,
            "type": "integer"
          }
        },
        "required": [
          "accessToken",
          "refreshToken",
          "refreshable"
        ],
        "type": "object"
      },
      "RefreshTokenResponse": {
        "properties": {
          "expiry": {
            "description": "Expiry of the access token",
            "type": "string"
          },
          "refreshToken": {
            "description": "Single use refresh token",
            "type": "string"
          },
          "refreshTokenExpiry": {
            "description": "Expiry of the refresh token",
            "type": "string"
          },
          "token": {
            "description": "JWT access token",
            "type": "string"
          },
          "userId": {
            "description": "User ID of the logged in user",
            "type": "integer"
          }
        },
        "required": [
          "expiry",
          "refreshToken",
          "refreshTokenExpiry",
          "token",
          "userId"
        ],
        "type": "object"
      },
      "RegistrationRequest": {
        "properties": {
          "password": {
            "minLength": 8,
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "password",
          "username"
        ],
        "type": "object"
      },
      "RegistrationResponse": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "children": {
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "type": "array",
            "uniqueItems": false
          },
          "currency": {
            "type": "string"
          },
          "deviceIds": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "uniqueItems": false
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "locationCredits": {
            "type": "integer"
          },
          "parentUserId": {
            "type": "integer"
          },
          "preferences": {
            "$ref": "#/components/schemas/UserPreferences"
          },
          "resellerId": {
            "type": "integer"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": false
          },
          "stripeCustomer": {
            "type": "string"
          },
          "stripeMeteredSubId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "xeContactId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserPreferences": {
        "additionalProperties": {},
        "type": "object"
      },
      "UsersClaimDeviceRequest": {
        "properties": {
          "serial": {
            "description": "Serial number of the device",
            "type": "string"
          }
        },
        "required": [
          "serial"
        ],
        "type": "object"
      },
      "data": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "httputil.HTTPError": {
        "properties": {
          "code": {
            "example": 400,
            "type": "integer"
          },
          "message": {
            "example": "status bad request",
            "type": "string"
          }
        },
        "type": "object"
      },
      "internal_api_handlers_v2_users.UserPlanSummaryEntry": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "plan": {
            "$ref": "#/components/schemas/Plan"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "title": "Lightbug API",
    "version": "2"
  },
  "externalDocs": {
    "description": "",
    "url": ""
  },
  "paths": {
    "/users": {
      "get": {
        "description": "Gets an optionally filtered list of users.",
        "parameters": [
          {
            "description": "Filter by ID. Multiple values work as ORs.",
            "in": "query",
            "name": "id",
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Filter by username. * can be used as a wildcard.",
            "in": "query",
            "name": "username",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit for pagination, default 10, max 10000",
            "in": "query",
            "name": "_limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Page for pagination",
            "in": "query",
            "name": "_page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Include additional data",
            "in": "query",
            "name": "_include",
            "schema": {
              "items": {
                "enum": [
                  "children",
                  "roles",
                  "deviceIds"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/data"
                    }
                  ],
                  "properties": {
                    "data": {
                      "description": "Paginated data"
                    },
                    "limit": {
                      "description": "Requested elements per page",
                      "type": "integer"
                    },
                    "page": {
                      "description": "Requested page number",
                      "type": "integer"
                    },
                    "totalElements": {
                      "description": "Total elements in the database for given filters",
                      "type": "integer"
                    },
                    "totalPages": {
                      "description": "Total pages of elements given limit and filters",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Limit exceeded",
            "headers": {
              "X-Ratelimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Reset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Gets users",
        "tags": [
          "hidden",
          "users"
        ]
      }
    },
    "/users/buyPlans": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyPlansRequest"
              }
            }
          },
          "description": "Request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Limit exceeded",
            "headers": {
              "X-Ratelimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Reset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "summary": "Purchases plans",
        "tags": [
          "users",
          "published"
        ]
      }
    },
    "/users/claimDevice": {
      "post": {
        "description": "Claims a device for the user, adding it to your account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersClaimDeviceRequest"
              }
            }
          },
          "description": "Claim device request",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Limit exceeded",
            "headers": {
              "X-Ratelimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Reset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Claims a device",
        "tags": [
          "users",
          "published"
        ]
      }
    },
    "/users/login": {
      "post": {
        "description": "Login and receive an access token for future requests.\nOptionally receive a refresh token for future access token generation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "description": "Login",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Limit exceeded",
            "headers": {
              "X-Ratelimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Reset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Login",
        "tags": [
          "auth",
          "published"
        ]
      }
    },
    "/users/logout": {
      "post": {
        "description": "Logout and invalidate the current access token.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Limit exceeded",
            "headers": {
              "X-Ratelimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Reset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Logout",
        "tags": [
          "auth",
          "published"
        ]
      }
    },
    "/users/passwordReset": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequest"
              }
            }
          },
          "description": "PasswordReset",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Limit exceeded",
            "headers": {
              "X-Ratelimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Reset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Start a password reset for a user",
        "tags": [
          "hidden",
          "users"
        ]
      }
    },
    "/users/plansSummary": {
      "get": {
        "description": "Gets a summary of plans for a user (already purchased)\nThis can list unused, and used plans with the `consumed` query parameter",
        "parameters": [
          {
            "description": "Filter by plans that have already been consumed by devices or not",
            "in": "query",
            "name": "consumed",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/internal_api_handlers_v2_users.UserPlanSummaryEntry"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Limit exceeded",
            "headers": {
              "X-Ratelimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Reset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Summary of plans",
        "tags": [
          "users",
          "published"
        ]
      }
    },
    "/users/refreshToken": {
      "post": {
        "description": "Refresh the access token and refresh token that was retrieved during login.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          },
          "description": "RefreshToken",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Limit exceeded",
            "headers": {
              "X-Ratelimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Reset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Refresh token",
        "tags": [
          "auth",
          "published"
        ]
      }
    },
    "/users/register": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          },
          "description": "Registration",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Limit exceeded",
            "headers": {
              "X-Ratelimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Reset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Register a new user",
        "tags": [
          "hidden",
          "users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "parameters": [
          {
            "description": "User ID, or 'me' to get the current user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include additional data",
            "in": "query",
            "name": "_include",
            "schema": {
              "items": {
                "enum": [
                  "children",
                  "roles",
                  "deviceIds"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httputil.HTTPError"
                }
              }
            },
            "description": "Unauthorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Limit exceeded",
            "headers": {
              "X-Ratelimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-Ratelimit-Reset": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Gets a user",
        "tags": [
          "hidden",
          "users"
        ]
      }
    }
  },
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "http://localhost:8080/v2"
    },
    {
      "url": "https://api.lightbug.cloud:8080/v2"
    }
  ]
}
