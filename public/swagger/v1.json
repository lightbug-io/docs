{
    "openapi": "3.0.1",
    "info": {
      "title": "Version 1",
      "description": "API for retrieving tracking data and changing settings on Lightbug tracking devices",
      "version": "1.1.0"
    },
    "servers": [
      {
        "url": "https://api.lightbug.cloud/api"
      }
    ],
    "tags": [
      {
        "name": "authentication"
      },
      {
        "name": "users"
      },
      {
        "name": "notifications"
      },
      {
        "name": "devices"
      },
      {
        "name": "points"
      },
      {
        "name": "readings"
      },
      {
        "name": "geofences"
      },
      {
        "name": "rtk"
      }
    ],
    "paths": {
      "/devices/{id}/points/{fk}": {
        "get": {
          "tags": [
            "points"
          ],
          "summary": "Retrieve a specific point for a device",
          "operationId": "device.prototype.__findById__points",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for points",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/datapoint"
                  }
                }
              }
            }
          },
          "deprecated": false
        },
        "delete": {
          "tags": [
            "points"
          ],
          "summary": "Delete a specific point for a device",
          "operationId": "device.prototype.__destroyById__points",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for points",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful",
              "content": {}
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/config": {
        "get": {
          "tags": [
            "devices"
          ],
          "summary": "Retrieve configuration for a device",
          "operationId": "device.prototype.__get__config",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "refresh",
              "in": "query",
              "description": "unused",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/deviceConfig"
                  }
                }
              }
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "devices"
          ],
          "summary": "Update configuration for a device",
          "operationId": "device.prototype.__update__config",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceConfig"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/deviceConfig"
                  }
                }
              }
            }
          },
          "deprecated": false,
          "x-codegen-request-body-name": "data"
        }
      },
      "/devices/{id}/readings/{fk}": {
        "get": {
          "tags": [
            "readings"
          ],
          "summary": "Retrieve a specific reading for a device",
          "operationId": "device.prototype.__findById__readings",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for readings",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/sensorReading"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/gatewayReadings/{fk}": {
        "get": {
          "tags": [
            "readings"
          ],
          "summary": "Find a related item by id for gatewayReadings.",
          "operationId": "device.prototype.__findById__gatewayReadings",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for gatewayReadings",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/sensorReading"
                  }
                }
              }
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "readings"
          ],
          "summary": "Update a related item by id for gatewayReadings.",
          "operationId": "device.prototype.__updateById__gatewayReadings",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for gatewayReadings",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sensorReading"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/sensorReading"
                  }
                }
              }
            }
          },
          "deprecated": false,
          "x-codegen-request-body-name": "data"
        },
        "delete": {
          "tags": [
            "readings"
          ],
          "summary": "Delete a related item by id for gatewayReadings.",
          "operationId": "device.prototype.__destroyById__gatewayReadings",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for gatewayReadings",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful",
              "content": {}
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/notificationTriggers/{fk}": {
        "get": {
          "tags": [
            "notifications"
          ],
          "summary": "Find a related item by id for notificationTriggers.",
          "operationId": "device.prototype.__findById__notificationTriggers",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for notificationTriggers",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/notificationTrigger"
                  }
                }
              }
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "notifications"
          ],
          "summary": "Update an alert/notification trigger by id {fk} for device",
          "operationId": "device.prototype.__updateById__notificationTriggers",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for notificationTriggers",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationTrigger"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/notificationTrigger"
                  }
                }
              }
            }
          },
          "deprecated": false,
          "x-codegen-request-body-name": "data"
        },
        "delete": {
          "tags": [
            "notifications"
          ],
          "summary": "Remove alert/notification trigger by id {fk} for device",
          "operationId": "device.prototype.__destroyById__notificationTriggers",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for notificationTriggers",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful",
              "content": {}
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/transients/{fk}": {
        "get": {
          "tags": [
            "devices"
          ],
          "summary": "Find a related item by id for transients.",
          "operationId": "device.prototype.__findById__transients",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for transients",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/deviceTransient"
                  }
                }
              }
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "devices"
          ],
          "summary": "Update a related item by id for transients.",
          "operationId": "device.prototype.__updateById__transients",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for transients",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceTransient"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/deviceTransient"
                  }
                }
              }
            }
          },
          "deprecated": false,
          "x-codegen-request-body-name": "data"
        },
        "delete": {
          "tags": [
            "devices"
          ],
          "summary": "Delete a related item by id for transients.",
          "operationId": "device.prototype.__destroyById__transients",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for transients",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful",
              "content": {}
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/points": {
        "get": {
          "tags": [
            "points"
          ],
          "summary": "Retrieve points for a device",
          "operationId": "device.prototype.__get__points",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "JSON Filter object",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/datapoint"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/messages": {
        "get": {
          "tags": [
            "devices"
          ],
          "summary": "Queries messages of device.",
          "operationId": "device.prototype.__get__messages",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "JSON Filter object",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/deviceMessage"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "devices"
          ],
          "summary": "Creates a new instance in messages of this model.",
          "operationId": "device.prototype.__create__messages",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deviceMessage"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/deviceMessage"
                  }
                }
              }
            }
          },
          "deprecated": false,
          "x-codegen-request-body-name": "data"
        },
        "delete": {
          "tags": [
            "devices"
          ],
          "summary": "Deletes all messages of this model.",
          "operationId": "device.prototype.__delete__messages",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful",
              "content": {}
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/readings": {
        "get": {
          "tags": [
            "readings"
          ],
          "summary": "Retrieve readings for a device",
          "operationId": "device.prototype.__get__readings",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "JSON Filter object",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sensorReading"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/notificationTriggers": {
        "get": {
          "tags": [
            "notifications"
          ],
          "summary": "Get alerts for device",
          "operationId": "device.prototype.__get__notificationTriggers",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "JSON Filter object",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/notificationTrigger"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "notifications"
          ],
          "summary": "Create alert/notification trigger for device",
          "operationId": "device.prototype.__create__notificationTriggers",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notificationTrigger"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/notificationTrigger"
                  }
                }
              }
            }
          },
          "deprecated": false,
          "x-codegen-request-body-name": "data"
        },
        "delete": {
          "tags": [
            "notifications"
          ],
          "summary": "Remove all alert/notification trigger for device",
          "operationId": "device.prototype.__delete__notificationTriggers",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful",
              "content": {}
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/transients": {
        "get": {
          "tags": [
            "devices"
          ],
          "summary": "Queries transients of device.",
          "operationId": "device.prototype.__get__transients",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "JSON Filter object",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/deviceTransient"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}": {
        "get": {
          "tags": [
            "devices"
          ],
          "summary": "Find a model instance by {{id}} from the data source.",
          "operationId": "device.findById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Model id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/device"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/getRtkStatus": {
        "get": {
          "tags": [
            "rtk"
          ],
          "summary": "Retrieve RTK status and config object for a device",
          "operationId": "device.prototype.getRtkStatus",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/iRtkDevice"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/getRecentRtkLogs": {
        "get": {
          "tags": [
            "rtk"
          ],
          "summary": "Get recent log events from RTK service",
          "operationId": "device.prototype.getRecentRtkLogs",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/iRtkLog"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/getRtkCommand": {
        "get": {
          "tags": [
            "rtk"
          ],
          "summary": "Retrieve a command by messageId to check status",
          "operationId": "device.prototype.getRtkCommand",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "messageId",
              "in": "query",
              "description": "messageId of the command to retrieve",
              "required": true,
              "schema": {
                "type": "number",
                "format": ""
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/iRtkCommand"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/queueRtkCmd_UpdateRateMs": {
        "get": {
          "tags": [
            "rtk"
          ],
          "summary": "Change the update interval",
          "operationId": "device.prototype.queueRtkCmd_UpdateRateMs",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "intervalMs",
              "in": "query",
              "description": "eg 100ms = 10Hz (max). 1000 = 1Hz. 0 = disable. Settings are not persisted across reboots, so you may want to queue always when receiving \"connected\" event for a device",
              "required": true,
              "schema": {
                "type": "number",
                "format": ""
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/iRtkCommand"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/queueRtkCmd_AlertNow": {
        "get": {
          "tags": [
            "rtk"
          ],
          "summary": "Trigger an alert now on the device",
          "operationId": "device.prototype.queueRtkCmd_AlertNow",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "alertValue",
              "in": "query",
              "description": "Refer to documentation for structure of 4 byte alert value",
              "required": true,
              "schema": {
                "type": "number",
                "format": ""
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/iRtkCommand"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/queueRtkCmd_AlertWithPrompt": {
        "get": {
          "tags": [
            "rtk"
          ],
          "summary": "Trigger a prompt now on the device (response sent via MQTT)",
          "operationId": "device.prototype.queueRtkCmd_AlertWithPrompt",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "alertValue",
              "in": "query",
              "description": "Refer to documentation for structure of 4 byte alert value",
              "required": true,
              "schema": {
                "type": "number",
                "format": ""
              }
            },
            {
              "name": "prompt",
              "in": "query",
              "description": "Text to display on device. Long text will be scrolled automatically but try to keep it short!",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "btn1Text",
              "in": "query",
              "description": "Text to display above left(up) arrow button",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "btn2Text",
              "in": "query",
              "description": "Text to display above right(down) arrow button",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "timeoutS",
              "in": "query",
              "description": "if non-zero, auto hide message after this many seconds",
              "schema": {
                "type": "number",
                "format": ""
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/iRtkCommand"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/queueRtkCmd_RebootRtk": {
        "get": {
          "tags": [
            "rtk"
          ],
          "summary": "Reboot RTK Module (useful for fixing multipath hysteresis issues)",
          "operationId": "device.prototype.queueRtkCmd_RebootRtk",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/iRtkCommand"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/queueRtkCmd_SetPointBufferSize": {
        "get": {
          "tags": [
            "rtk"
          ],
          "summary": "Set point buffer size",
          "operationId": "device.prototype.queueRtkCmd_SetPointBufferSize",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "maxPoints",
              "in": "query",
              "description": "min=1, max=1000(default). 250 recommended for poor network areas. Settings are not persisted across reboots, so you may want to queue cmd always when receiving \"connected\" event for a device",
              "required": true,
              "schema": {
                "type": "number",
                "format": ""
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/iRtkCommand"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/updateRtkBaseStatus": {
        "get": {
          "tags": [
            "rtk"
          ],
          "summary": "External BaseStation Status Change",
          "operationId": "device.prototype.updateRtkBaseStatus",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "online",
              "in": "query",
              "description": "If the external base is online. If true, the other parameters are required",
              "required": true,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "lat",
              "in": "query",
              "description": "Latitude of the external base",
              "schema": {
                "type": "number",
                "format": ""
              }
            },
            {
              "name": "lng",
              "in": "query",
              "description": "Longitude of the external base",
              "schema": {
                "type": "number",
                "format": ""
              }
            },
            {
              "name": "alt",
              "in": "query",
              "description": "Altitude of the external base",
              "schema": {
                "type": "number",
                "format": ""
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/iRtkBase"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/flightMode": {
        "get": {
          "tags": [
            "devices"
          ],
          "operationId": "device.prototype.flightMode",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "duration",
              "in": "query",
              "description": "How long to go into flightMode, in minutes",
              "required": true,
              "schema": {
                "type": "number",
                "format": ""
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/setSafeZone": {
        "post": {
          "tags": [
            "devices"
          ],
          "summary": "Update safe-zone for device",
          "operationId": "device.prototype.setSafeZone",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "requestBody": {
            "description": "Array of {lat:x,lng:y} points denoting the vertices of the safe-zone",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeoPoint"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/geofence"
                  }
                }
              }
            }
          },
          "deprecated": false,
          "x-codegen-request-body-name": "data"
        }
      },
      "/devices/{id}/getSafeZone": {
        "get": {
          "tags": [
            "devices"
          ],
          "summary": "Get safe-zone for device",
          "operationId": "device.prototype.getSafeZone",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/geofence"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/nearbyDevices": {
        "get": {
          "tags": [
            "devices"
          ],
          "operationId": "device.prototype.nearbyDevices",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "dateRange",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "correlationId",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/x-any"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/nearbyDeviceData": {
        "get": {
          "tags": [
            "devices"
          ],
          "operationId": "device.prototype.nearbyDeviceData",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "nearbyId",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "dateRange",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/setupSqsForwarding": {
        "get": {
          "tags": [
            "devices"
          ],
          "operationId": "device.prototype.setupSqsForwarding",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "sqsArn",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "types",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/devices/{id}/setMetaItem": {
        "get": {
          "tags": [
            "devices"
          ],
          "operationId": "device.prototype.setMetaItem",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            },
            {
              "name": "key",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/users/{id}/geofences/{fk}": {
        "get": {
          "tags": [
            "geofences"
          ],
          "summary": "Find a related item by id for geofences.",
          "operationId": "user.prototype.__findById__geofences",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "user id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for geofences",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/geofence"
                  }
                }
              }
            }
          },
          "deprecated": false
        },
        "put": {
          "tags": [
            "users"
          ],
          "summary": "Update a related item by id for geofences.",
          "operationId": "user.prototype.__updateById__geofences",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "user id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for geofences",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/geofence"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/geofence"
                  }
                }
              }
            }
          },
          "deprecated": false,
          "x-codegen-request-body-name": "data"
        },
        "delete": {
          "tags": [
            "users"
          ],
          "summary": "Delete a related item by id for geofences.",
          "operationId": "user.prototype.__destroyById__geofences",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "user id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "fk",
              "in": "path",
              "description": "Foreign key for geofences",
              "required": true,
              "schema": {
                "type": "number",
                "format": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful",
              "content": {}
            }
          },
          "deprecated": false
        }
      },
      "/users/{id}/devices": {
        "get": {
          "tags": [
            "devices"
          ],
          "summary": "Queries devices of user.",
          "operationId": "user.prototype.__get__devices",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "user id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "JSON Filter object",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/device"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/users/{id}/geofences": {
        "get": {
          "tags": [
            "geofences"
          ],
          "summary": "Queries geofences of user.",
          "operationId": "user.prototype.__get__geofences",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "user id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "JSON Filter object",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/geofence"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        },
        "post": {
          "tags": [
            "users"
          ],
          "summary": "Creates a new instance in geofences of this model.",
          "operationId": "user.prototype.__create__geofences",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "user id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/geofence"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/geofence"
                  }
                }
              }
            }
          },
          "deprecated": false,
          "x-codegen-request-body-name": "data"
        },
        "delete": {
          "tags": [
            "users"
          ],
          "summary": "Deletes all geofences of this model.",
          "operationId": "user.prototype.__delete__geofences",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "user id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Request was successful",
              "content": {}
            }
          },
          "deprecated": false
        }
      },
      "/users/login": {
        "post": {
          "tags": [
            "authentication"
          ],
          "summary": "Login a user with username/email and password.",
          "operationId": "user.login",
          "parameters": [
            {
              "name": "include",
              "in": "query",
              "description": "Related objects to include in the response. See the description of return value for more details.",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credentials"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/accessToken"
                  }
                }
              }
            }
          },
          "deprecated": false,
          "x-codegen-request-body-name": "credentials",
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "label": "JS + Axios",
              "source": "xxx"
            }
          ]
        }
      },
      "/users/{id}/getDeviceSummary": {
        "get": {
          "tags": [
            "devices"
          ],
          "summary": "Retrieve a summary of all devices on this user account.",
          "operationId": "user.prototype.getDeviceSummary",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "user id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "pointCount",
              "in": "query",
              "description": "Maximum number of points to return per device. Default 5.",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "dateRange",
              "in": "query",
              "description": "What date range to consider when retrieving recent points. Typical use is [TimeOfLastPointDownload, NOW]. Defaults to all time.",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "hideApprox",
              "in": "query",
              "description": "Don't include GSM / poor accuracy locations. Default to false.",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "Returns Array of device objects, with extra field `latestPoints`, containing an array of simplified datapoint objects. Datapoint fields included are 'id', 'timestamp', 'location', 'speed', 'course', 'accuracy', 'sendReason', 'address', 'deviceId', 'alertType'",
                    "items": {
                      "$ref": "#/components/schemas/x-any"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/users/{id}/getDevicesInZone": {
        "get": {
          "tags": [
            "devices"
          ],
          "summary": "Retrieve a list of devices in any given zone or group of zones.",
          "operationId": "user.prototype.getDevicesInZone",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "user id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "zoneId",
              "in": "query",
              "description": "ID of geofence to search. zoneId or zoneType required.",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "zoneType",
              "in": "query",
              "description": "Type of zones to search. Ignored if zoneId is specified. zoneId or zoneType required.",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "includeApprox",
              "in": "query",
              "description": "Include GSM / poor accuracy locations. Default to false.",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "Returns Array of device objects, with extra field `latestPoints`, containing an array of simplified datapoint objects. Datapoint fields included are 'id', 'timestamp', 'location', 'speed', 'course', 'accuracy', 'sendReason', 'address', 'deviceId', 'alertType'",
                    "items": {
                      "$ref": "#/components/schemas/x-any"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/users/{id}/getDevicesByTag": {
        "get": {
          "tags": [
            "devices"
          ],
          "summary": "Retrieve a list of devices matching a given tag.",
          "operationId": "user.prototype.getDevicesByTag",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "user id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            },
            {
              "name": "tag",
              "in": "query",
              "description": "Tag to search for in fully qualified key:value format. Example device_type:truck. Partial searches with wildcards may be used, eg device_type:% or device_type:veh_%",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Optional array of device model fields to return. eg [\"id\",\"name\"]",
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "Returns Array of device objects",
                    "items": {
                      "$ref": "#/components/schemas/x-any"
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      },
      "/users/{id}/getMqttCredentials": {
        "get": {
          "tags": [
            "users"
          ],
          "summary": "Get MQTT credentials for a user.",
          "operationId": "user.prototype.getMqttCredentials",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "user id",
              "required": true,
              "schema": {
                "type": "string",
                "format": "JSON"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request was successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "clientId": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "deprecated": false
        }
      }
    },
    "security": [
      {
        "ApiKeyAuth": []
      }
    ],
    "components": {
      "securitySchemes": {
        "ApiKeyAuth": {
          "type": "apiKey",
          "in": "header",
          "name": "Authorization"
        }
      },
      "schemas": {
        "x-any": {
          "type": "object"
        },
        "datapoint": {
          "required": [
            "created",
            "locationType",
            "timestamp"
          ],
          "type": "object",
          "properties": {
            "location": {
              "$ref": "#/components/schemas/GeoPoint"
            },
            "timestamp": {
              "type": "string",
              "description": "Timestamp for the datapoint. NB this is not necessarily the same as 'created'",
              "format": "date-time"
            },
            "speed": {
              "type": "number",
              "description": "Ground velocity in kmh, as determined by the GPS",
              "format": ""
            },
            "altitude": {
              "type": "number",
              "description": "Altitude in m, as determined by the GPS",
              "format": ""
            },
            "course": {
              "type": "number",
              "description": "Course in degrees, as determined by the GPS",
              "format": ""
            },
            "num_value": {
              "type": "string",
              "description": "Internal use only"
            },
            "stringValue": {
              "type": "string",
              "description": "Internal use only"
            },
            "sendReason": {
              "type": "number",
              "description": "Bitfield indicating reason for datapoint transmission and status of the device at the time.\n\r\nBit1(1): Wake mode active, \n\r\nBit2(2): Sleep mode active, \n\r\nBit3(4): Bluetooth disconnected, \n\r\nBit4(8): Outside of Safe-zone, \n\r\nBit5(16): Motion detected, \n\r\nBit6(32): Device started moving, \n\r\nBit7(64): Device stopped moving, \n\r\nBit8(128): Position is stale: last known location was used\n\r\nSpecial case 255/0xFF: device was checking in with server. Ignore all data",
              "format": ""
            },
            "sats": {
              "type": "number",
              "description": "Number of visible satellites, as determined by the GPS",
              "format": ""
            },
            "hdop": {
              "type": "number",
              "description": "Deprecated",
              "format": ""
            },
            "accuracy": {
              "type": "number",
              "description": "Accuracy of the location in meters",
              "format": ""
            },
            "locationType": {
              "type": "string",
              "description": "Type of position. Can be 'gps', 'wifi', 'gsm' or 'invalid'",
              "default": "gps"
            },
            "batteryVoltage": {
              "type": "number",
              "description": "Battery charge level in volts.",
              "format": ""
            },
            "batteryPct": {
              "type": "number",
              "description": "Battery charge level in %.",
              "format": ""
            },
            "averageCharge": {
              "type": "number",
              "description": "Internal Use. 255 indicates plugged in and charging.",
              "format": ""
            },
            "created": {
              "type": "string",
              "description": "Timestamp for when the datapoint was received and processed by the server",
              "format": "date-time"
            },
            "address": {
              "type": "string",
              "description": "A reverse geocode result for the point"
            },
            "alertType": {
              "type": "number",
              "description": "Bitfield indicating what alerts where active at transmission time\n\r\nBit1(1): Freefall / Drop detected, \n\r\nBit2(2): Rotation detected, \n\r\nBit3(4): GSM jamming detected, \n\r\nBit4(8): Button was pressed, \n\r\nBit5(16): Generic Alert ",
              "format": ""
            },
            "currentUsed": {
              "type": "number",
              "description": "Current Used to send this location in microAmp Hours",
              "format": ""
            },
            "gsmSignal": {
              "type": "number",
              "description": "GSM CSQ value",
              "format": ""
            },
            "correlationId": {
              "type": "string",
              "description": "Internal use - correlation identifier"
            },
            "id": {
              "type": "number",
              "format": ""
            },
            "deviceId": {
              "type": "number",
              "format": ""
            }
          }
        },
        "deviceConfig": {
          "required": [
            "alertAction",
            "interval",
            "packing",
            "sleepInterval",
            "wakeAction"
          ],
          "type": "object",
          "properties": {
            "currentFW": {
              "type": "string",
              "description": "Current Firmware version"
            },
            "otaFW": {
              "type": "string",
              "description": "Pending Firmware version. If non null, the unit will be told to upgrade to\nthis version when it next transmits in sleep mode."
            },
            "interval": {
              "type": "number",
              "description": "The wake mode interval in seconds. The unit will connect to the server this often when awake.",
              "format": ""
            },
            "sleepInterval": {
              "type": "number",
              "description": "Sleep mode interval in seconds. The unit will try to connect this often to the server when asleep",
              "format": ""
            },
            "packing": {
              "type": "number",
              "description": "The number of GPS points to send with each transmission. A packing setting of 3 with an 'interval'\nof 60s will result in points recorded approximately every 20s, but they will only be sent together.\nThis increases the time you have to wait for locations to come through to the server but improves battery life",
              "format": ""
            },
            "movementSensitivity": {
              "type": "number",
              "description": "Deprecated. See debounce.",
              "format": ""
            },
            "debounce": {
              "type": "number",
              "description": "Movement sensitivity on a scale of 1 to 10, with 1 being the most sensitive. It is correlated to the\nnumber of consecutive milliseconds the acceleration needs to exceed the movementSensitivity threshold",
              "format": ""
            },
            "movementSensitivity2": {
              "type": "number",
              "description": "A secondary debounce value. Typically this value is lower or equal to debounce, representing increased\nsensitivity to movement once the device is already moving.",
              "format": ""
            },
            "behavior": {
              "type": "number",
              "description": "Char Bitfield with various flags. Advanced use only. \nDisableBluetooth:32 | \nEncrypt:128 | \nGsmOnWhenAwake:1 | \nGsmOnWhenAsleep:2 | \nGpsOnWhenAwake:4 | \nDisableWifiAccuracyAssist:8 | \nRepeatSleep:16 | \nDisableWifi:64",
              "format": ""
            },
            "modeControl": {
              "type": "number",
              "description": "Char Bitfield with various flags. Advanced use only. \nStartStopOnly:1 | \nLockAwakeOnAlert:2 | \nSendSleepLocAfterBtDisconnect:4 | ",
              "format": ""
            },
            "modeControl2": {
              "type": "number",
              "description": "Char Bitfield with various flags. Advanced use only. FW >= 69. \nSendStopImmediately:1 | \nStopTimeoutIsInMinutes:2 | \nHarshPowerBudget:4 | \nLock2G: 8",
              "format": ""
            },
            "gpsTimeout": {
              "type": "number",
              "description": "How long to let the GPS searches for a lock in seconds before giving up. Max 255s.",
              "format": ""
            },
            "transmitTimeout": {
              "type": "number",
              "description": "When the unit first wakes up from sleep, how long to wait before trying to transmit in multiples of 30 seconds. 0 = instant, 1 = 30s, 2 = 60s...\n\r\nUseful to avoid detection or draining battery inside shielded buildings.",
              "format": ""
            },
            "gpsStabilize": {
              "type": "number",
              "description": "How long to let the GPS stabilise in seconds once a lock is achieved before sending the position. Higher values may increase accuracy.",
              "format": ""
            },
            "gpsCheckInterval": {
              "type": "number",
              "description": "If a safe-zone is used, how often to check the wifi & gps to see if its still inside it (only applies when motion is detected)",
              "format": ""
            },
            "stopTimeout": {
              "type": "number",
              "description": "The total amount of time in seconds the unit has to be stationary for before deeming the journey over and switching to sleep mode",
              "format": ""
            },
            "tolerancePercentage": {
              "type": "number",
              "description": "Power budget in mAh per location update. Default 10, do not set lower than 5.",
              "format": ""
            },
            "reasonsToWake": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            },
            "modified": {
              "type": "string",
              "description": "Set to any non null date to indicate the configuration should be pushed to the device when it next connects",
              "format": "date-time"
            },
            "forceFw": {
              "type": "boolean",
              "description": "Internal use.\n\r\nUsed with otaFW. Set to true to force the unit to upgrade on next connection (rather than waiting\nfor a sleep connection",
              "default": false
            },
            "receivedAt": {
              "type": "string",
              "description": "Indicates the last time the settings were sent to the device",
              "format": "date-time"
            },
            "reset": {
              "type": "number",
              "description": "Non NULL values cause unit to restart on next connection\n\r\n0 = Normal reboot\n\r\n1 = Clear settings cache and restart\n\r\n2 = Clear cache and bluetooth connection data, then restart",
              "format": ""
            },
            "flashTryCount": {
              "type": "number",
              "description": "Internal use. Set to 0 when changing otaFW. How many times the update command was sent from the server. This roughly equates to the number of times the device has tried to download the update file, but isn't necessarily 1:1. When 8, the update command will no longer be sent.",
              "format": ""
            },
            "homeWifiNetwork": {
              "maxLength": 127,
              "type": "string",
              "description": "WiFi network name to use as a Safe-zone. When this network is visible, stay asleep"
            },
            "wakeAction": {
              "type": "string",
              "description": "Internal Use Only. What to do when the unit wakes up (ie is moved and not in a safe-zone). Options are 'available'\n(lost and found), and 'normal' (tracking)",
              "default": "normal"
            },
            "alertAction": {
              "type": "string",
              "description": "What to do when the button is pressed or the unit is dropped. Options are\n'available' (stay registered on the mobile network),\n'nothing' (one transmission) and \n'lockOn' (keep transmitting at 'interval' until instructed otherwise",
              "default": "nothing"
            },
            "timed": {
              "type": "array",
              "description": "Timed update settings. Must be array of objects matching [{hh: number, mm: number, day: number, action: number}, ...] format",
              "items": {
                "type": "object",
                "properties": {}
              }
            },
            "command": {
              "type": "number",
              "description": "Internal use. Sends command to device on next connection",
              "format": ""
            },
            "id": {
              "type": "number",
              "format": ""
            },
            "deviceId": {
              "type": "number",
              "format": ""
            },
            "safeZoneId": {
              "type": "number",
              "format": ""
            }
          }
        },
        "notification": {
          "required": [
            "created"
          ],
          "type": "object",
          "properties": {
            "created": {
              "type": "string",
              "format": "date-time"
            },
            "params": {
              "type": "object",
              "properties": {}
            },
            "message": {
              "type": "string"
            },
            "dismissedOn": {
              "type": "string",
              "format": "date-time"
            },
            "dismissedBy": {
              "type": "object",
              "properties": {}
            },
            "id": {
              "type": "number",
              "format": ""
            },
            "deviceId": {
              "type": "number",
              "format": ""
            },
            "pointId": {
              "type": "number",
              "format": ""
            },
            "userId": {
              "type": "number",
              "format": ""
            },
            "triggerId": {
              "type": "number",
              "format": ""
            }
          }
        },
        "deviceMessage": {
          "required": [
            "created"
          ],
          "type": "object",
          "properties": {
            "config": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "format": "byte"
            },
            "message": {
              "type": "string"
            },
            "mobileTerminated": {
              "type": "boolean",
              "default": true
            },
            "created": {
              "type": "string",
              "format": "date-time"
            },
            "sent": {
              "type": "string",
              "format": "date-time"
            },
            "id": {
              "type": "number",
              "format": ""
            },
            "deviceId": {
              "type": "number",
              "format": ""
            },
            "userId": {
              "type": "number",
              "format": ""
            }
          }
        },
        "sensorReading": {
          "required": [
            "created",
            "timestamp",
            "type",
            "value"
          ],
          "type": "object",
          "properties": {
            "timestamp": {
              "type": "string",
              "description": "Timestamp for the reading",
              "format": "date-time"
            },
            "created": {
              "type": "string",
              "description": "Timestamp for the writing to db",
              "format": "date-time"
            },
            "type": {
              "type": "string",
              "description": "Sensor type: 'ultra' (fill level), 'temp' (temperature), ..."
            },
            "value": {
              "type": "object",
              "properties": {},
              "description": "JSON value"
            },
            "rssi": {
              "type": "number",
              "description": "RSSI if from secondary wireless device",
              "format": ""
            },
            "meta": {
              "type": "object",
              "properties": {},
              "description": "JSON metadata"
            },
            "relatedId": {
              "type": "number",
              "description": "LoraId of another (ie for signal strength)",
              "format": ""
            },
            "correlationId": {
              "type": "string",
              "description": "Internal use - correlation identifier"
            },
            "id": {
              "type": "number",
              "format": ""
            },
            "gatewayId": {
              "type": "number",
              "format": ""
            },
            "deviceId": {
              "type": "number",
              "format": ""
            },
            "sensorDeviceId": {
              "type": "string"
            },
            "datapointId": {
              "type": "number",
              "format": ""
            }
          }
        },
        "notificationTrigger": {
          "required": [
            "delivery",
            "muteFor",
            "name",
            "type"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "parameters": {
              "type": "object",
              "properties": {}
            },
            "muteFor": {
              "type": "number",
              "format": ""
            },
            "lastTriggered": {
              "type": "string",
              "format": "date-time"
            },
            "delivery": {
              "type": "object",
              "properties": {}
            },
            "id": {
              "type": "number",
              "format": ""
            },
            "deviceId": {
              "type": "number",
              "format": ""
            },
            "userId": {
              "type": "number",
              "format": ""
            }
          }
        },
        "deviceTransient": {
          "required": [
            "duration",
            "triggeredAt",
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "number",
              "format": ""
            },
            "duration": {
              "type": "number",
              "format": ""
            },
            "triggeredAt": {
              "type": "string",
              "format": "date-time"
            },
            "end": {
              "type": "string",
              "format": "date-time"
            },
            "sent": {
              "type": "string",
              "format": "date-time"
            },
            "sms": {
              "type": "boolean",
              "default": false
            },
            "id": {
              "type": "number",
              "format": ""
            },
            "deviceId": {
              "type": "number",
              "format": ""
            }
          }
        },
        "iRtkBase": {
          "required": [
            "deviceId"
          ],
          "type": "object",
          "properties": {
            "deviceId": {
              "type": "number",
              "format": ""
            },
            "type": {
              "type": "string",
              "description": "ENUM('primary', 'secondary')"
            },
            "group": {
              "type": "number",
              "format": ""
            },
            "connected": {
              "type": "string",
              "description": "Last open msg receive time from rtk base (not same as last message, use log for this)",
              "format": "date-time"
            },
            "surveyCompleted": {
              "type": "string",
              "description": "TBC",
              "format": "date-time"
            },
            "location": {
              "$ref": "#/components/schemas/GeoPoint"
            },
            "accuracy": {
              "type": "number",
              "format": ""
            },
            "status": {
              "type": "string",
              "description": "ENUM('offline', 'initializing', 'no_signal', 'online_fixed', 'online_surveyed', 'surveying')"
            },
            "fixedPositionLat": {
              "type": "number",
              "format": ""
            },
            "fixedPositionLng": {
              "type": "number",
              "format": ""
            },
            "fixedPositionAlt": {
              "type": "number",
              "format": ""
            },
            "surveyTime": {
              "type": "number",
              "format": ""
            },
            "surveyMinAcc": {
              "type": "number",
              "format": ""
            },
            "surveyRequested": {
              "type": "boolean"
            },
            "valid": {
              "type": "boolean"
            }
          }
        },
        "iRtkDevice": {
          "required": [
            "deviceId"
          ],
          "type": "object",
          "properties": {
            "deviceId": {
              "type": "number",
              "format": ""
            },
            "group": {
              "type": "number",
              "format": ""
            },
            "msgMask": {
              "type": "number",
              "format": ""
            },
            "connected": {
              "type": "string",
              "description": "Last open msg receive time from rtk base (not same as last message, use log for this)",
              "format": "date-time"
            },
            "locationUpdated": {
              "type": "string",
              "description": "TBC",
              "format": "date-time"
            },
            "location": {
              "$ref": "#/components/schemas/GeoPoint"
            },
            "accuracy": {
              "type": "number",
              "format": ""
            },
            "positionType": {
              "type": "string",
              "description": "ENUM('invalid', 'fixed', '2d', 'standalone', 'rtkFloat', 'rtkFix')"
            },
            "currentBaseId": {
              "type": "number",
              "format": ""
            }
          }
        },
        "iRtkLog": {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "format": ""
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "deviceId": {
              "type": "number",
              "format": ""
            },
            "msgType": {
              "type": "number",
              "format": ""
            },
            "baseStationId": {
              "type": "number",
              "format": ""
            },
            "locationType": {
              "type": "string",
              "description": "ENUM('invalid', 'fixed', '2d', 'standalone', 'rtkFloat', 'rtkFix')"
            },
            "accuracy": {
              "type": "number",
              "format": ""
            },
            "lat": {
              "type": "number",
              "format": ""
            },
            "lng": {
              "type": "number",
              "format": ""
            },
            "linkQuality": {
              "type": "number",
              "format": ""
            },
            "toAddress": {
              "type": "string"
            },
            "fromAddress": {
              "type": "string"
            },
            "info": {
              "type": "string"
            }
          }
        },
        "iRtkCommand": {
          "required": [
            "commandType",
            "created",
            "deviceId"
          ],
          "type": "object",
          "properties": {
            "deviceId": {
              "type": "number",
              "description": "DeviceId recipient",
              "format": ""
            },
            "messageId": {
              "type": "number",
              "description": "A unique (per device) message ID for the command. If not supplied, a random 32 bit integer will be assigned. Duplicate messageIds will throw an error.",
              "format": ""
            },
            "commandType": {
              "type": "number",
              "description": "Command number. Currently supported SetUpdateRate = 1,AlertNow = 2,AlertWithPrompt = 3,RestartGps = 4,SetPointBufferMaxSize = 5,PromptAction = 6",
              "format": ""
            },
            "created": {
              "type": "string",
              "description": "Auto-filled on save, when the command was created in the system",
              "format": "date-time"
            },
            "sent": {
              "type": "string",
              "description": "Set to current time when the command is sent to the device. If multiple resends without ACK, it will reflect the latest send.",
              "format": "date-time"
            },
            "receivedAck": {
              "type": "string",
              "description": "When the server received ACK from device for this messageId",
              "format": "date-time"
            },
            "payload": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "description": "Associated data for the command",
              "format": "byte"
            },
            "response": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "description": "If the device transmitted a command response with matching messageId, it will be stored here. Mostly this field will be null.",
              "format": "byte"
            },
            "id": {
              "type": "number",
              "format": ""
            }
          }
        },
        "device": {
          "required": [
            "firstSeen"
          ],
          "type": "object",
          "properties": {
            "imei": {
              "maxLength": 15,
              "type": "string"
            },
            "iccid": {
              "type": "string"
            },
            "loraId": {
              "type": "number",
              "format": ""
            },
            "imsi": {
              "type": "string"
            },
            "btMac": {
              "type": "number",
              "description": "Bluetooth MAC Address as 48bit number",
              "format": ""
            },
            "btMacAddress": {
              "maxLength": 17,
              "type": "string",
              "description": "Bluetooth MAC Address in standard format"
            },
            "uwbId": {
              "type": "number",
              "description": "UWB Address as 32bit number",
              "format": ""
            },
            "serial": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "expires": {
              "type": "string",
              "format": "date-time"
            },
            "lastConnection": {
              "type": "string",
              "format": "date-time"
            },
            "firstSeen": {
              "type": "string",
              "format": "date-time"
            },
            "mode": {
              "type": "string",
              "default": "default"
            },
            "name": {
              "type": "string"
            },
            "batteryVoltage": {
              "type": "number",
              "format": ""
            },
            "batteryPct": {
              "type": "number",
              "format": ""
            },
            "batteryType": {
              "type": "string",
              "default": "LIO"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "currentMode": {
              "type": "number",
              "description": "Indicates last known device state. 0 = awake, 1 = sleep, 6 = flight mode",
              "format": ""
            },
            "color": {
              "type": "string",
              "default": "fc7c3d"
            },
            "saveToWeb": {
              "type": "boolean",
              "default": false
            },
            "active": {
              "type": "boolean",
              "default": false
            },
            "deepSleep": {
              "type": "boolean",
              "default": false
            },
            "simstate": {
              "type": "string",
              "default": "active"
            },
            "stripeSubscription": {
              "type": "string"
            },
            "subscriptionType": {
              "type": "string"
            },
            "meta": {
              "type": "object",
              "properties": {}
            },
            "siloId": {
              "type": "number",
              "format": ""
            },
            "resellerId": {
              "type": "number",
              "format": ""
            },
            "resellerPlanId": {
              "type": "number",
              "format": ""
            },
            "btPasskey": {
              "type": "number",
              "format": ""
            },
            "simType": {
              "type": "string",
              "default": "JT"
            },
            "id": {
              "type": "number",
              "format": ""
            },
            "ownerId": {
              "type": "number",
              "format": ""
            },
            "onoWhitelistId": {
              "type": "number",
              "format": ""
            }
          }
        },
        "geofence": {
          "type": "object",
          "properties": {
            "outline": {
              "type": "array",
              "description": "Array of {lat:x,lng:y} objects representing the vertices of the polygon. Do not use with center and radius.",
              "items": {
                "type": "object",
                "properties": {}
              }
            },
            "center": {
              "$ref": "#/components/schemas/GeoPoint"
            },
            "radius": {
              "type": "number",
              "description": "For circular geofences, the radius of the circle in meters. Property is ignored if outline != null.",
              "format": ""
            },
            "type": {
              "type": "string",
              "description": "Grouping value"
            },
            "name": {
              "type": "string"
            },
            "wasInside": {
              "type": "boolean",
              "description": "If the last point received was inside the geofence. Only updated for notifications (not the safe-zone as that is evaluated on the device)",
              "default": false
            },
            "lastChecked": {
              "type": "string",
              "description": "When the geofence was last evaluated. Only updated for notifications (not the safe-zone as that is evaluated on the device)",
              "format": "date-time"
            },
            "modified": {
              "type": "boolean",
              "default": false
            },
            "meta": {
              "type": "object",
              "properties": {}
            },
            "foreignId": {
              "type": "string"
            },
            "id": {
              "type": "number",
              "format": ""
            },
            "deviceId": {
              "type": "number",
              "format": ""
            },
            "configId": {
              "type": "number",
              "format": ""
            },
            "userId": {
              "type": "number",
              "format": ""
            }
          }
        },
        "accessToken": {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The token",
              "example": "18rj0k2r81h2r980ijfd0m8f21"
            },
            "ttl": {
              "type": "number",
              "description": "Time to live in seconds (2 weeks by default)",
              "format": "",
              "example": "1210000"
            },
            "scopes": {
              "type": "array",
              "description": "Array of scopes granted to this access token. (Not currently used)",
              "items": {
                "type": "string"
              },
              "example": "[]"
            },
            "created": {
              "type": "string",
              "format": "date-time",
              "example": "2023-10-12T10:31:09.273Z"
            },
            "userId": {
              "type": "number",
              "format": "",
              "example": "123"
            }
          }
        },
        "iRtkNtrip": {
          "required": [
            "deviceId"
          ],
          "type": "object",
          "properties": {
            "deviceId": {
              "type": "number",
              "format": ""
            },
            "hostname": {
              "type": "string"
            },
            "portNum": {
              "type": "number",
              "format": ""
            },
            "mountpoint": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          }
        },
        "GeoPoint": {
          "type": "object",
          "properties": {
            "lat": {
              "type": "number"
            },
            "lng": {
              "type": "number"
            }
          }
        },
        "credentials": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "example": "foo@example.io"
            },
            "password": {
              "type": "string",
              "example": "super-secure-password-67890"
            }
          }
        }
      }
    }
  }
