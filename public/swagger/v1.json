{
    "swagger": "2.0",
    "info": {
        "version": "1.1.0",
        "title": "TrackingAPI",
        "description": "API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices"
    },
    "basePath": "/api",
    "paths": {
        "/devices/{id}/points/{fk}": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Retrieve a specific point for a device",
                "operationId": "device.prototype.__findById__points",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for points",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/datapoint"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "device"
                ],
                "summary": "Delete a specific point for a device",
                "operationId": "device.prototype.__destroyById__points",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for points",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/config": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Retrieve configuration for a device",
                "operationId": "device.prototype.__get__config",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "refresh",
                        "description": "unused",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/deviceConfig"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "device"
                ],
                "summary": "Update configuration for a device",
                "operationId": "device.prototype.__update__config",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/deviceConfig"
                        },
                        "description": "Body (JSON)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/deviceConfig"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/readings/{fk}": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Retrieve a specific reading for a device",
                "operationId": "device.prototype.__findById__readings",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for readings",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/sensorReading"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/gatewayReadings/{fk}": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Find a related item by id for gatewayReadings.",
                "operationId": "device.prototype.__findById__gatewayReadings",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for gatewayReadings",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/sensorReading"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "device"
                ],
                "summary": "Delete a related item by id for gatewayReadings.",
                "operationId": "device.prototype.__destroyById__gatewayReadings",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for gatewayReadings",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "device"
                ],
                "summary": "Update a related item by id for gatewayReadings.",
                "operationId": "device.prototype.__updateById__gatewayReadings",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for gatewayReadings",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/sensorReading"
                        },
                        "description": "Body (JSON)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/sensorReading"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/notificationTriggers/{fk}": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Find a related item by id for notificationTriggers.",
                "operationId": "device.prototype.__findById__notificationTriggers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for notificationTriggers",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/notificationTrigger"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "device"
                ],
                "summary": "Remove alert/notification trigger by id {fk} for device",
                "operationId": "device.prototype.__destroyById__notificationTriggers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for notificationTriggers",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "device"
                ],
                "summary": "Update an alert/notification trigger by id {fk} for device",
                "operationId": "device.prototype.__updateById__notificationTriggers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for notificationTriggers",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/notificationTrigger"
                        },
                        "description": "Body (JSON)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/notificationTrigger"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/transients/{fk}": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Find a related item by id for transients.",
                "operationId": "device.prototype.__findById__transients",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for transients",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/deviceTransient"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "device"
                ],
                "summary": "Delete a related item by id for transients.",
                "operationId": "device.prototype.__destroyById__transients",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for transients",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "device"
                ],
                "summary": "Update a related item by id for transients.",
                "operationId": "device.prototype.__updateById__transients",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for transients",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/deviceTransient"
                        },
                        "description": "Body (JSON)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/deviceTransient"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/points": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Retrieve points for a device",
                "operationId": "device.prototype.__get__points",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "filter",
                        "description": "JSON Filter object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/datapoint"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/messages": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Queries messages of device.",
                "operationId": "device.prototype.__get__messages",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "filter",
                        "description": "JSON Filter object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/deviceMessage"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "device"
                ],
                "summary": "Creates a new instance in messages of this model.",
                "operationId": "device.prototype.__create__messages",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/deviceMessage"
                        },
                        "description": "Body (JSON)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/deviceMessage"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "device"
                ],
                "summary": "Deletes all messages of this model.",
                "operationId": "device.prototype.__delete__messages",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/readings": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Retrieve readings for a device",
                "operationId": "device.prototype.__get__readings",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "filter",
                        "description": "JSON Filter object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/sensorReading"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/notificationTriggers": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Get alerts for device",
                "operationId": "device.prototype.__get__notificationTriggers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "filter",
                        "description": "JSON Filter object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notificationTrigger"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "device"
                ],
                "summary": "Create alert/notification trigger for device",
                "operationId": "device.prototype.__create__notificationTriggers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/notificationTrigger"
                        },
                        "description": "Body (JSON)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/notificationTrigger"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "device"
                ],
                "summary": "Remove all alert/notification trigger for device",
                "operationId": "device.prototype.__delete__notificationTriggers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/transients": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Queries transients of device.",
                "operationId": "device.prototype.__get__transients",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "filter",
                        "description": "JSON Filter object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/deviceTransient"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "Find a model instance by {{id}} from the data source.",
                "operationId": "device.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/device"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/getRtkStatus": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "RTK>Retrieve rtk status and config object for a device",
                "operationId": "device.prototype.getRtkStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/iRtkDevice"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/getRecentRtkLogs": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "RTK>Get recent log events from rtk service",
                "operationId": "device.prototype.getRecentRtkLogs",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/iRtkLog"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/getRtkCommand": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "RTK>Retrieve a command by messageId to check status",
                "operationId": "device.prototype.getRtkCommand",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "messageId",
                        "in": "query",
                        "description": "messageId of the command to retrieve",
                        "required": true,
                        "type": "number",
                        "format": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/iRtkCommand"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/queueRtkCmd_UpdateRateMs": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "RTK>Change the update interval",
                "operationId": "device.prototype.queueRtkCmd_UpdateRateMs",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "intervalMs",
                        "in": "query",
                        "description": "eg 100ms = 10Hz (max). 1000 = 1Hz. 0 = disable. Settings are not persisted across reboots, so you may want to queue always when receiving \"connected\" event for a device",
                        "required": true,
                        "type": "number",
                        "format": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/iRtkCommand"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/queueRtkCmd_AlertNow": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "RTK>Trigger an alert now on the device",
                "operationId": "device.prototype.queueRtkCmd_AlertNow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "alertValue",
                        "in": "query",
                        "description": "Refer to documentation for structure of 4 byte alert value",
                        "required": true,
                        "type": "number",
                        "format": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/iRtkCommand"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/queueRtkCmd_AlertWithPrompt": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "RTK>Trigger a prompt now on the device (response sent via MQTT)",
                "operationId": "device.prototype.queueRtkCmd_AlertWithPrompt",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "alertValue",
                        "in": "query",
                        "description": "Refer to documentation for structure of 4 byte alert value",
                        "required": true,
                        "type": "number",
                        "format": ""
                    },
                    {
                        "name": "prompt",
                        "in": "query",
                        "description": "Text to display on device. Long text will be scrolled automatically but try to keep it short!",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "btn1Text",
                        "in": "query",
                        "description": "Text to display above left(up) arrow button",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "btn2Text",
                        "in": "query",
                        "description": "Text to display above right(down) arrow button",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "timeoutS",
                        "in": "query",
                        "description": "if non-zero, auto hide message after this many seconds",
                        "required": false,
                        "type": "number",
                        "format": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/iRtkCommand"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/queueRtkCmd_RebootRtk": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "RTK>Reboot Rtk Module (useful for fixing multipath hysteresis issues)",
                "operationId": "device.prototype.queueRtkCmd_RebootRtk",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/iRtkCommand"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/queueRtkCmd_SetPointBufferSize": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "RTK>Set point buffer size",
                "operationId": "device.prototype.queueRtkCmd_SetPointBufferSize",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "maxPoints",
                        "in": "query",
                        "description": "min=1, max=1000(default). 250 recommended for poor network areas. Settings are not persisted across reboots, so you may want to queue cmd always when receiving \"connected\" event for a device",
                        "required": true,
                        "type": "number",
                        "format": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/iRtkCommand"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/updateRtkBaseStatus": {
            "get": {
                "tags": [
                    "device"
                ],
                "summary": "RTK>External BaseStation Status Change",
                "operationId": "device.prototype.updateRtkBaseStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "online",
                        "in": "query",
                        "description": "If the external base is online. If true, the other parameters are required",
                        "required": true,
                        "type": "boolean"
                    },
                    {
                        "name": "lat",
                        "in": "query",
                        "description": "Latitude of the external base",
                        "required": false,
                        "type": "number",
                        "format": ""
                    },
                    {
                        "name": "lng",
                        "in": "query",
                        "description": "Longitude of the external base",
                        "required": false,
                        "type": "number",
                        "format": ""
                    },
                    {
                        "name": "alt",
                        "in": "query",
                        "description": "Altitude of the external base",
                        "required": false,
                        "type": "number",
                        "format": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/iRtkBase"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/flightMode": {
            "get": {
                "tags": [
                    "device"
                ],
                "operationId": "device.prototype.flightMode",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "duration",
                        "in": "query",
                        "description": "How long to go into flightMode, in minutes",
                        "required": true,
                        "type": "number",
                        "format": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/setSafeZone": {
            "post": {
                "tags": [
                    "device"
                ],
                "operationId": "device.prototype.setSafeZone",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GeoPoint"
                            }
                        },
                        "description": "Array of {lat:x,lng:y} points denoting the vertices of the safe-zone"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/geofence"
                        }
                    }
                },
                "deprecated": false,
                "summary": "Update safe-zone for device"
            }
        },
        "/devices/{id}/getSafeZone": {
            "get": {
                "tags": [
                    "device"
                ],
                "operationId": "device.prototype.getSafeZone",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/geofence"
                        }
                    }
                },
                "deprecated": false,
                "summary": "Get safe-zone for device"
            }
        },
        "/devices/{id}/nearbyDevices": {
            "get": {
                "tags": [
                    "device"
                ],
                "operationId": "device.prototype.nearbyDevices",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "dateRange",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "correlationId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/x-any"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/nearbyDeviceData": {
            "get": {
                "tags": [
                    "device"
                ],
                "operationId": "device.prototype.nearbyDeviceData",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "nearbyId",
                        "in": "query",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "dateRange",
                        "in": "query",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/setupSqsForwarding": {
            "get": {
                "tags": [
                    "device"
                ],
                "operationId": "device.prototype.setupSqsForwarding",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "sqsArn",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/devices/{id}/setMetaItem": {
            "get": {
                "tags": [
                    "device"
                ],
                "operationId": "device.prototype.setMetaItem",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "device id",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}/geofences/{fk}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Find a related item by id for geofences.",
                "operationId": "user.prototype.__findById__geofences",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for geofences",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/geofence"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete a related item by id for geofences.",
                "operationId": "user.prototype.__destroyById__geofences",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for geofences",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Update a related item by id for geofences.",
                "operationId": "user.prototype.__updateById__geofences",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for geofences",
                        "required": true,
                        "type": "number",
                        "format": "integer"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/geofence"
                        },
                        "description": "Body (JSON)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/geofence"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}/devices": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Queries devices of user.",
                "operationId": "user.prototype.__get__devices",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "description": "JSON Filter object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/device"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}/geofences": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Queries geofences of user.",
                "operationId": "user.prototype.__get__geofences",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "description": "JSON Filter object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/geofence"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates a new instance in geofences of this model.",
                "operationId": "user.prototype.__create__geofences",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/geofence"
                        },
                        "description": "Body (JSON)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/geofence"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Deletes all geofences of this model.",
                "operationId": "user.prototype.__delete__geofences",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/users/login": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Login a user with username/email and password.",
                "operationId": "user.login",
                "parameters": [
                    {
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/credentials"
                        },
                        "description": "Body (JSON)"
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Related objects to include in the response. See the description of return value for more details.",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Body (JSON)",
                        "schema": {
                            "$ref": "#/definitions/accessToken"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}/getDeviceSummary": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Retrieve a summary of all devices on this user account.",
                "operationId": "user.prototype.getDeviceSummary",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "pointCount",
                        "in": "query",
                        "description": "Maximum number of points to return per device. Default 5.",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "dateRange",
                        "in": "query",
                        "description": "What date range to consider when retrieving recent points. Typical use is [TimeOfLastPointDownload, NOW]. Defaults to all time.",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "hideApprox",
                        "in": "query",
                        "description": "Don't include GSM / poor accuracy locations. Default to false.",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Returns Array of device objects, with extra field `latestPoints`, containing an array of simplified datapoint objects. Datapoint fields included are 'id', 'timestamp', 'location', 'speed', 'course', 'accuracy', 'sendReason', 'address', 'deviceId', 'alertType'",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/x-any"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}/getDevicesInZone": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Retrieve a list of devices in any given zone or group of zones.",
                "operationId": "user.prototype.getDevicesInZone",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "zoneId",
                        "in": "query",
                        "description": "ID of geofence to search. zoneId or zoneType required.",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "zoneType",
                        "in": "query",
                        "description": "Type of zones to search. Ignored if zoneId is specified. zoneId or zoneType required.",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "includeApprox",
                        "in": "query",
                        "description": "Include GSM / poor accuracy locations. Default to false.",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Returns Array of device objects, with extra field `latestPoints`, containing an array of simplified datapoint objects. Datapoint fields included are 'id', 'timestamp', 'location', 'speed', 'course', 'accuracy', 'sendReason', 'address', 'deviceId', 'alertType'",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/x-any"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}/getDevicesByTag": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Retrieve a list of devices matching a given tag.",
                "operationId": "user.prototype.getDevicesByTag",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "description": "Tag to search for in fully qualified key:value format. Example device_type:truck. Partial searches with wildcards may be used, eg device_type:% or device_type:veh_%",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Optional array of device model fields to return. eg [\"id\",\"name\"]",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "Returns Array of device objects",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/x-any"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}/getMqttCredentials": {
            "get": {
                "tags": [
                    "user"
                ],
                "operationId": "user.prototype.getMqttCredentials",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "user id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "clientId": {
                                    "type": "string"
                                },
                                "username": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        }
    },
    "tags": [
        {
            "name": "device"
        }
    ],
    "consumes": [
        "application/json",
        "application/x-www-form-urlencoded",
        "application/xml",
        "text/xml"
    ],
    "produces": [
        "application/json",
        "application/xml",
        "text/xml",
        "application/javascript",
        "text/javascript"
    ],
    "definitions": {
        "x-any": {
            "properties": {}
        },
        "datapoint": {
            "properties": {
                "location": {
                    "$ref": "#/definitions/GeoPoint"
                },
                "timestamp": {
                    "description": "Timestamp for the datapoint. NB this is not necessarily the same as 'created'",
                    "type": "string",
                    "format": "date-time"
                },
                "speed": {
                    "description": "Ground velocity in kmh, as determined by the GPS",
                    "type": "number",
                    "format": ""
                },
                "altitude": {
                    "description": "Altitude in m, as determined by the GPS",
                    "type": "number",
                    "format": ""
                },
                "course": {
                    "description": "Course in degrees, as determined by the GPS",
                    "type": "number",
                    "format": ""
                },
                "num_value": {
                    "description": "Internal use only",
                    "type": "string"
                },
                "stringValue": {
                    "description": "Internal use only",
                    "type": "string"
                },
                "sendReason": {
                    "description": "Bitfield indicating reason for datapoint transmission and status of the device at the time.\n\r\nBit1(1): Wake mode active, \n\r\nBit2(2): Sleep mode active, \n\r\nBit3(4): Bluetooth disconnected, \n\r\nBit4(8): Outside of Safe-zone, \n\r\nBit5(16): Motion detected, \n\r\nBit6(32): Device started moving, \n\r\nBit7(64): Device stopped moving, \n\r\nBit8(128): Position is stale: last known location was used\n\r\nSpecial case 255/0xFF: device was checking in with server. Ignore all data",
                    "type": "number",
                    "format": ""
                },
                "sats": {
                    "description": "Number of visible satellites, as determined by the GPS",
                    "type": "number",
                    "format": ""
                },
                "hdop": {
                    "description": "Deprecated",
                    "type": "number",
                    "format": ""
                },
                "accuracy": {
                    "description": "Accuracy of the location in meters",
                    "type": "number",
                    "format": ""
                },
                "locationType": {
                    "default": "gps",
                    "description": "Type of position. Can be 'gps', 'wifi', 'gsm' or 'invalid'",
                    "type": "string"
                },
                "batteryVoltage": {
                    "description": "Battery charge level in volts.",
                    "type": "number",
                    "format": ""
                },
                "batteryPct": {
                    "description": "Battery charge level in %.",
                    "type": "number",
                    "format": ""
                },
                "averageCharge": {
                    "description": "Internal Use. 255 indicates plugged in and charging.",
                    "type": "number",
                    "format": ""
                },
                "created": {
                    "description": "Timestamp for when the datapoint was received and processed by the server",
                    "type": "string",
                    "format": "date-time"
                },
                "address": {
                    "description": "A reverse geocode result for the point",
                    "type": "string"
                },
                "alertType": {
                    "description": "Bitfield indicating what alerts where active at transmission time\n\r\nBit1(1): Freefall / Drop detected, \n\r\nBit2(2): Rotation detected, \n\r\nBit3(4): GSM jamming detected, \n\r\nBit4(8): Button was pressed, \n\r\nBit5(16): Generic Alert ",
                    "type": "number",
                    "format": ""
                },
                "currentUsed": {
                    "description": "Current Used to send this location in microAmp Hours",
                    "type": "number",
                    "format": ""
                },
                "gsmSignal": {
                    "description": "GSM CSQ value",
                    "type": "number",
                    "format": ""
                },
                "correlationId": {
                    "description": "Internal use - correlation identifier",
                    "type": "string"
                },
                "id": {
                    "type": "number",
                    "format": ""
                },
                "deviceId": {
                    "type": "number",
                    "format": ""
                }
            },
            "required": [
                "timestamp",
                "locationType",
                "created"
            ]
        },
        "deviceConfig": {
            "properties": {
                "currentFW": {
                    "description": "Current Firmware version",
                    "type": "string"
                },
                "otaFW": {
                    "description": "Pending Firmware version. If non null, the unit will be told to upgrade to\nthis version when it next transmits in sleep mode.",
                    "type": "string"
                },
                "interval": {
                    "default": 300,
                    "description": "The wake mode interval in seconds. The unit will connect to the server this often when awake.",
                    "type": "number",
                    "format": ""
                },
                "sleepInterval": {
                    "default": 43200,
                    "description": "Sleep mode interval in seconds. The unit will try to connect this often to the server when asleep",
                    "type": "number",
                    "format": ""
                },
                "packing": {
                    "default": 1,
                    "description": "The number of GPS points to send with each transmission. A packing setting of 3 with an 'interval'\nof 60s will result in points recorded approximately every 20s, but they will only be sent together.\nThis increases the time you have to wait for locations to come through to the server but improves battery life",
                    "type": "number",
                    "format": ""
                },
                "movementSensitivity": {
                    "default": 1,
                    "description": "Deprecated. See debounce.",
                    "type": "number",
                    "format": ""
                },
                "debounce": {
                    "default": 3,
                    "description": "Movement sensitivity on a scale of 1 to 10, with 1 being the most sensitive. It is correlated to the\nnumber of consecutive milliseconds the acceleration needs to exceed the movementSensitivity threshold",
                    "type": "number",
                    "format": ""
                },
                "movementSensitivity2": {
                    "default": 2,
                    "description": "A secondary debounce value. Typically this value is lower or equal to debounce, representing increased\nsensitivity to movement once the device is already moving.",
                    "type": "number",
                    "format": ""
                },
                "behavior": {
                    "default": 0,
                    "description": "Char Bitfield with various flags. Advanced use only. \nDisableBluetooth:32 | \nEncrypt:128 | \nGsmOnWhenAwake:1 | \nGsmOnWhenAsleep:2 | \nGpsOnWhenAwake:4 | \nDisableWifiAccuracyAssist:8 | \nRepeatSleep:16 | \nDisableWifi:64",
                    "type": "number",
                    "format": ""
                },
                "modeControl": {
                    "default": 0,
                    "description": "Char Bitfield with various flags. Advanced use only. \nStartStopOnly:1 | \nLockAwakeOnAlert:2 | \nSendSleepLocAfterBtDisconnect:4 | ",
                    "type": "number",
                    "format": ""
                },
                "modeControl2": {
                    "default": 0,
                    "description": "Char Bitfield with various flags. Advanced use only. FW >= 69. \nSendStopImmediately:1 | \nStopTimeoutIsInMinutes:2 | \nHarshPowerBudget:4 | \nLock2G: 8",
                    "type": "number",
                    "format": ""
                },
                "gpsTimeout": {
                    "default": 90,
                    "description": "How long to let the GPS searches for a lock in seconds before giving up. Max 255s.",
                    "type": "number",
                    "format": ""
                },
                "transmitTimeout": {
                    "default": 0,
                    "description": "When the unit first wakes up from sleep, how long to wait before trying to transmit in multiples of 30 seconds. 0 = instant, 1 = 30s, 2 = 60s...\n\r\nUseful to avoid detection or draining battery inside shielded buildings.",
                    "type": "number",
                    "format": ""
                },
                "gpsStabilize": {
                    "default": 10,
                    "description": "How long to let the GPS stabilise in seconds once a lock is achieved before sending the position. Higher values may increase accuracy.",
                    "type": "number",
                    "format": ""
                },
                "gpsCheckInterval": {
                    "default": 120,
                    "description": "If a safe-zone is used, how often to check the wifi & gps to see if its still inside it (only applies when motion is detected)",
                    "type": "number",
                    "format": ""
                },
                "stopTimeout": {
                    "default": 90,
                    "description": "The total amount of time in seconds the unit has to be stationary for before deeming the journey over and switching to sleep mode",
                    "type": "number",
                    "format": ""
                },
                "tolerancePercentage": {
                    "default": 10,
                    "description": "Power budget in mAh per location update. Default 10, do not set lower than 5.",
                    "type": "number",
                    "format": ""
                },
                "reasonsToWake": {
                    "default": [
                        {
                            "bluetooth": false,
                            "move": true,
                            "geofence": false
                        }
                    ],
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "modified": {
                    "description": "Set to any non null date to indicate the configuration should be pushed to the device when it next connects",
                    "type": "string",
                    "format": "date-time"
                },
                "forceFw": {
                    "default": false,
                    "description": "Internal use.\n\r\nUsed with otaFW. Set to true to force the unit to upgrade on next connection (rather than waiting\nfor a sleep connection",
                    "type": "boolean"
                },
                "receivedAt": {
                    "description": "Indicates the last time the settings were sent to the device",
                    "type": "string",
                    "format": "date-time"
                },
                "reset": {
                    "description": "Non NULL values cause unit to restart on next connection\n\r\n0 = Normal reboot\n\r\n1 = Clear settings cache and restart\n\r\n2 = Clear cache and bluetooth connection data, then restart",
                    "type": "number",
                    "format": ""
                },
                "flashTryCount": {
                    "description": "Internal use. Set to 0 when changing otaFW",
                    "type": "number",
                    "format": ""
                },
                "homeWifiNetwork": {
                    "maxLength": 127,
                    "description": "WiFi network name to use as a Safe-zone. When this network is visible, stay asleep",
                    "type": "string"
                },
                "wakeAction": {
                    "default": "normal",
                    "description": "Internal Use Only. What to do when the unit wakes up (ie is moved and not in a safe-zone). Options are 'available'\n(lost and found), and 'normal' (tracking)",
                    "type": "string"
                },
                "alertAction": {
                    "default": "nothing",
                    "description": "What to do when the button is pressed or the unit is dropped. Options are\n'available' (stay registered on the mobile network),\n'nothing' (one transmission) and \n'lockOn' (keep transmitting at 'interval' until instructed otherwise",
                    "type": "string"
                },
                "timed": {
                    "description": "Timed update settings. Must be array of objects matching [{hh: number, mm: number, day: number, action: number}, ...] format",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "command": {
                    "description": "Internal use. Sends command to device on next connection",
                    "type": "number",
                    "format": ""
                },
                "id": {
                    "type": "number",
                    "format": ""
                },
                "deviceId": {
                    "type": "number",
                    "format": ""
                },
                "safeZoneId": {
                    "type": "number",
                    "format": ""
                }
            },
            "required": [
                "interval",
                "sleepInterval",
                "packing",
                "wakeAction",
                "alertAction"
            ]
        },
        "notification": {
            "properties": {
                "created": {
                    "type": "string",
                    "format": "date-time"
                },
                "params": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                },
                "dismissedOn": {
                    "type": "string",
                    "format": "date-time"
                },
                "dismissedBy": {
                    "type": "object"
                },
                "id": {
                    "type": "number",
                    "format": ""
                },
                "deviceId": {
                    "type": "number",
                    "format": ""
                },
                "pointId": {
                    "type": "number",
                    "format": ""
                },
                "userId": {
                    "type": "number",
                    "format": ""
                },
                "triggerId": {
                    "type": "number",
                    "format": ""
                }
            },
            "required": [
                "created"
            ]
        },
        "deviceMessage": {
            "properties": {
                "config": {
                    "type": "string",
                    "format": "byte"
                },
                "message": {
                    "type": "string"
                },
                "mobileTerminated": {
                    "default": true,
                    "type": "boolean"
                },
                "created": {
                    "type": "string",
                    "format": "date-time"
                },
                "sent": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "type": "number",
                    "format": ""
                },
                "deviceId": {
                    "type": "number",
                    "format": ""
                },
                "userId": {
                    "type": "number",
                    "format": ""
                }
            },
            "required": [
                "created"
            ]
        },
        "sensorReading": {
            "properties": {
                "timestamp": {
                    "description": "Timestamp for the reading",
                    "type": "string",
                    "format": "date-time"
                },
                "created": {
                    "description": "Timestamp for the writing to db",
                    "type": "string",
                    "format": "date-time"
                },
                "type": {
                    "description": "Sensor type: 'ultra' (fill level), 'temp' (temperature), ...",
                    "type": "string"
                },
                "value": {
                    "description": "JSON value",
                    "type": "object"
                },
                "rssi": {
                    "description": "RSSI if from secondary wireless device",
                    "type": "number",
                    "format": ""
                },
                "meta": {
                    "description": "JSON metadata",
                    "type": "object"
                },
                "relatedId": {
                    "description": "LoraId of another (ie for signal strength)",
                    "type": "number",
                    "format": ""
                },
                "correlationId": {
                    "description": "Internal use - correlation identifier",
                    "type": "string"
                },
                "id": {
                    "type": "number",
                    "format": ""
                },
                "gatewayId": {
                    "type": "number",
                    "format": ""
                },
                "deviceId": {
                    "type": "number",
                    "format": ""
                },
                "sensorDeviceId": {
                    "type": "string"
                },
                "datapointId": {
                    "type": "number",
                    "format": ""
                }
            },
            "required": [
                "timestamp",
                "created",
                "type",
                "value"
            ]
        },
        "notificationTrigger": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object"
                },
                "muteFor": {
                    "default": 0,
                    "type": "number",
                    "format": ""
                },
                "lastTriggered": {
                    "type": "string",
                    "format": "date-time"
                },
                "delivery": {
                    "default": {
                        "push": true,
                        "email": false
                    },
                    "type": "object"
                },
                "id": {
                    "type": "number",
                    "format": ""
                },
                "deviceId": {
                    "type": "number",
                    "format": ""
                },
                "userId": {
                    "type": "number",
                    "format": ""
                }
            },
            "required": [
                "name",
                "type",
                "muteFor",
                "delivery"
            ]
        },
        "deviceTransient": {
            "properties": {
                "type": {
                    "type": "number",
                    "format": ""
                },
                "duration": {
                    "type": "number",
                    "format": ""
                },
                "triggeredAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "end": {
                    "type": "string",
                    "format": "date-time"
                },
                "sent": {
                    "type": "string",
                    "format": "date-time"
                },
                "sms": {
                    "default": false,
                    "type": "boolean"
                },
                "id": {
                    "type": "number",
                    "format": ""
                },
                "deviceId": {
                    "type": "number",
                    "format": ""
                }
            },
            "required": [
                "type",
                "duration",
                "triggeredAt"
            ]
        },
        "iRtkBase": {
            "properties": {
                "deviceId": {
                    "type": "number",
                    "format": ""
                },
                "type": {
                    "description": "ENUM('primary', 'secondary')",
                    "type": "string"
                },
                "group": {
                    "type": "number",
                    "format": ""
                },
                "connected": {
                    "description": "Last open msg receive time from rtk base (not same as last message, use log for this)",
                    "type": "string",
                    "format": "date-time"
                },
                "surveyCompleted": {
                    "description": "TBC",
                    "type": "string",
                    "format": "date-time"
                },
                "location": {
                    "$ref": "#/definitions/GeoPoint"
                },
                "accuracy": {
                    "type": "number",
                    "format": ""
                },
                "status": {
                    "description": "ENUM('offline', 'initializing', 'no_signal', 'online_fixed', 'online_surveyed', 'surveying')",
                    "type": "string"
                },
                "fixedPositionLat": {
                    "type": "number",
                    "format": ""
                },
                "fixedPositionLng": {
                    "type": "number",
                    "format": ""
                },
                "fixedPositionAlt": {
                    "type": "number",
                    "format": ""
                },
                "surveyTime": {
                    "type": "number",
                    "format": ""
                },
                "surveyMinAcc": {
                    "type": "number",
                    "format": ""
                },
                "surveyRequested": {
                    "type": "boolean"
                },
                "valid": {
                    "type": "boolean"
                }
            },
            "required": [
                "deviceId"
            ]
        },
        "iRtkDevice": {
            "properties": {
                "deviceId": {
                    "type": "number",
                    "format": ""
                },
                "group": {
                    "type": "number",
                    "format": ""
                },
                "msgMask": {
                    "type": "number",
                    "format": ""
                },
                "connected": {
                    "description": "Last open msg receive time from rtk base (not same as last message, use log for this)",
                    "type": "string",
                    "format": "date-time"
                },
                "locationUpdated": {
                    "description": "TBC",
                    "type": "string",
                    "format": "date-time"
                },
                "location": {
                    "$ref": "#/definitions/GeoPoint"
                },
                "accuracy": {
                    "type": "number",
                    "format": ""
                },
                "positionType": {
                    "description": "ENUM('invalid', 'fixed', '2d', 'standalone', 'rtkFloat', 'rtkFix')",
                    "type": "string"
                },
                "currentBaseId": {
                    "type": "number",
                    "format": ""
                }
            },
            "required": [
                "deviceId"
            ]
        },
        "iRtkLog": {
            "properties": {
                "id": {
                    "type": "number",
                    "format": ""
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time"
                },
                "deviceId": {
                    "type": "number",
                    "format": ""
                },
                "msgType": {
                    "type": "number",
                    "format": ""
                },
                "baseStationId": {
                    "type": "number",
                    "format": ""
                },
                "locationType": {
                    "description": "ENUM('invalid', 'fixed', '2d', 'standalone', 'rtkFloat', 'rtkFix')",
                    "type": "string"
                },
                "accuracy": {
                    "type": "number",
                    "format": ""
                },
                "lat": {
                    "type": "number",
                    "format": ""
                },
                "lng": {
                    "type": "number",
                    "format": ""
                },
                "linkQuality": {
                    "type": "number",
                    "format": ""
                },
                "toAddress": {
                    "type": "string"
                },
                "fromAddress": {
                    "type": "string"
                },
                "info": {
                    "type": "string"
                }
            },
            "required": [
                "id"
            ]
        },
        "iRtkCommand": {
            "properties": {
                "deviceId": {
                    "description": "DeviceId recipient",
                    "type": "number",
                    "format": ""
                },
                "messageId": {
                    "description": "A unique (per device) message ID for the command. If not supplied, a random 32 bit integer will be assigned. Duplicate messageIds will throw an error.",
                    "type": "number",
                    "format": ""
                },
                "commandType": {
                    "description": "Command number. Currently supported SetUpdateRate = 1,AlertNow = 2,AlertWithPrompt = 3,RestartGps = 4,SetPointBufferMaxSize = 5,PromptAction = 6",
                    "type": "number",
                    "format": ""
                },
                "created": {
                    "description": "Auto-filled on save, when the command was created in the system",
                    "type": "string",
                    "format": "date-time"
                },
                "sent": {
                    "description": "Set to current time when the command is sent to the device. If multiple resends without ACK, it will reflect the latest send.",
                    "type": "string",
                    "format": "date-time"
                },
                "receivedAck": {
                    "description": "When the server received ACK from device for this messageId",
                    "type": "string",
                    "format": "date-time"
                },
                "payload": {
                    "description": "Associated data for the command",
                    "type": "string",
                    "format": "byte"
                },
                "response": {
                    "description": "If the device transmitted a command response with matching messageId, it will be stored here. Mostly this field will be null.",
                    "type": "string",
                    "format": "byte"
                },
                "id": {
                    "type": "number",
                    "format": ""
                }
            },
            "required": [
                "deviceId",
                "commandType",
                "created"
            ]
        },
        "device": {
            "properties": {
                "imei": {
                    "maxLength": 15,
                    "type": "string"
                },
                "iccid": {
                    "type": "string"
                },
                "loraId": {
                    "type": "number",
                    "format": ""
                },
                "imsi": {
                    "type": "string"
                },
                "btMac": {
                    "description": "Bluetooth MAC Address as 48bit number",
                    "type": "number",
                    "format": ""
                },
                "btMacAddress": {
                    "maxLength": 17,
                    "description": "Bluetooth MAC Address in standard format",
                    "type": "string"
                },
                "uwbId": {
                    "description": "UWB Address as 32bit number",
                    "type": "number",
                    "format": ""
                },
                "serial": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "expires": {
                    "type": "string",
                    "format": "date-time"
                },
                "lastConnection": {
                    "type": "string",
                    "format": "date-time"
                },
                "firstSeen": {
                    "type": "string",
                    "format": "date-time"
                },
                "mode": {
                    "default": "default",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "batteryVoltage": {
                    "type": "number",
                    "format": ""
                },
                "batteryPct": {
                    "type": "number",
                    "format": ""
                },
                "batteryType": {
                    "default": "LIO",
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "currentMode": {
                    "description": "Indicates last known device state. 0 = awake, 1 = sleep, 6 = flight mode",
                    "type": "number",
                    "format": ""
                },
                "color": {
                    "default": "fc7c3d",
                    "type": "string"
                },
                "saveToWeb": {
                    "default": false,
                    "type": "boolean"
                },
                "active": {
                    "default": false,
                    "type": "boolean"
                },
                "deepSleep": {
                    "default": false,
                    "type": "boolean"
                },
                "simstate": {
                    "default": "active",
                    "type": "string"
                },
                "stripeSubscription": {
                    "type": "string"
                },
                "subscriptionType": {
                    "type": "string"
                },
                "meta": {
                    "type": "object"
                },
                "siloId": {
                    "type": "number",
                    "format": ""
                },
                "resellerId": {
                    "type": "number",
                    "format": ""
                },
                "resellerPlanId": {
                    "type": "number",
                    "format": ""
                },
                "btPasskey": {
                    "type": "number",
                    "format": ""
                },
                "simType": {
                    "default": "JT",
                    "type": "string"
                },
                "id": {
                    "type": "number",
                    "format": ""
                },
                "ownerId": {
                    "type": "number",
                    "format": ""
                },
                "onoWhitelistId": {
                    "type": "number",
                    "format": ""
                }
            },
            "required": [
                "firstSeen"
            ]
        },
        "geofence": {
            "properties": {
                "outline": {
                    "description": "Array of {lat:x,lng:y} objects representing the vertices of the polygon. Do not use with center and radius.",
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "center": {
                    "description": "For circular geofences, the center. Property is ignored if outline != null.",
                    "$ref": "#/definitions/GeoPoint"
                },
                "radius": {
                    "description": "For circular geofences, the radius of the circle in meters. Property is ignored if outline != null.",
                    "type": "number",
                    "format": ""
                },
                "type": {
                    "description": "Grouping value",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "wasInside": {
                    "default": false,
                    "description": "If the last point received was inside the geofence. Only updated for notifications (not the safe-zone as that is evaluated on the device)",
                    "type": "boolean"
                },
                "lastChecked": {
                    "description": "When the geofence was last evaluated. Only updated for notifications (not the safe-zone as that is evaluated on the device)",
                    "type": "string",
                    "format": "date-time"
                },
                "modified": {
                    "default": false,
                    "type": "boolean"
                },
                "meta": {
                    "type": "object"
                },
                "foreignId": {
                    "type": "string"
                },
                "id": {
                    "type": "number",
                    "format": ""
                },
                "deviceId": {
                    "type": "number",
                    "format": ""
                },
                "configId": {
                    "type": "number",
                    "format": ""
                },
                "userId": {
                    "type": "number",
                    "format": ""
                }
            }
        },
        "accessToken": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "ttl": {
                    "default": 1209600,
                    "description": "time to live in seconds (2 weeks by default)",
                    "type": "number",
                    "format": ""
                },
                "scopes": {
                    "description": "Array of scopes granted to this access token.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created": {
                    "type": "string",
                    "format": "date-time"
                },
                "userId": {
                    "type": "number",
                    "format": ""
                }
            },
            "required": [
                "id"
            ]
        },
        "iRtkNtrip": {
            "properties": {
                "deviceId": {
                    "type": "number",
                    "format": ""
                },
                "hostname": {
                    "type": "string"
                },
                "portNum": {
                    "type": "number",
                    "format": ""
                },
                "mountpoint": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            },
            "required": [
                "deviceId"
            ]
        },
        "GeoPoint": {
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                }
            }
        },
        "credentials": {
            "properties": {
                "username": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    },
    "host": "api.thelightbug.com",
    "schemes": [
        "https"
    ]
}
